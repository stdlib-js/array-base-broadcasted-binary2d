{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport broadcastArray from '@stdlib/array-base-broadcast-array';\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to elements in two broadcasted input arrays and assigns results to elements in a two-dimensional nested output array.\n*\n* @param {ArrayLikeObject<Array<Collection>>} arrays - array-like object containing two input nested arrays and one output nested array\n* @param {ArrayLikeObject<NonNegativeIntegerArray>} shapes - array shapes\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* import ones2d from '@stdlib/array-base-ones2d';\n* import zeros2d from '@stdlib/array-base-zeros2d';\n* import add from '@stdlib/math-base-ops-add';\n*\n* var shapes = [\n*     [ 1, 2 ],\n*     [ 2, 1 ],\n*     [ 2, 2 ]\n* ];\n*\n* var x = ones2d( shapes[ 0 ] );\n* var y = ones2d( shapes[ 1 ] );\n* var z = zeros2d( shapes[ 2 ] );\n*\n* bbinary2d( [ x, y, z ], shapes, add );\n*\n* console.log( z );\n* // => [ [ 2.0, 2.0 ], [ 2.0, 2.0 ] ]\n*/\nfunction bbinary2d( arrays, shapes, fcn ) {\n\tvar dx0;\n\tvar dx1;\n\tvar dy0;\n\tvar dy1;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar k0;\n\tvar k1;\n\tvar x0;\n\tvar y0;\n\tvar z0;\n\tvar sh;\n\tvar st;\n\tvar o;\n\tvar x;\n\tvar y;\n\tvar z;\n\n\tsh = shapes[ 2 ];\n\tS0 = sh[ 1 ];\n\tS1 = sh[ 0 ];\n\tif ( S0 <= 0 || S1 <= 0 ) {\n\t\treturn;\n\t}\n\to = broadcastArray( arrays[ 0 ], shapes[ 0 ], sh );\n\tx = o.data;\n\tst = o.strides;\n\tdx0 = st[ 1 ];\n\tdx1 = st[ 0 ];\n\n\to = broadcastArray( arrays[ 1 ], shapes[ 1 ], sh );\n\ty = o.data;\n\tst = o.strides;\n\tdy0 = st[ 1 ];\n\tdy1 = st[ 0 ];\n\n\tz = arrays[ 2 ];\n\n\tj1 = 0;\n\tk1 = 0;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tj0 = 0;\n\t\tk0 = 0;\n\t\tx0 = x[ j1 ];\n\t\ty0 = y[ k1 ];\n\t\tz0 = z[ i1 ];\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tz0[ i0 ] = fcn( x0[ j0 ], y0[ k0 ] );\n\t\t\tj0 += dx0;\n\t\t\tk0 += dy0;\n\t\t}\n\t\tj1 += dx1;\n\t\tk1 += dy1;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default bbinary2d;\n"],"names":["bbinary2d","arrays","shapes","fcn","dx0","dx1","dy0","dy1","S0","S1","i0","i1","j0","j1","k0","k1","x0","y0","z0","sh","st","o","x","y","z","broadcastArray","data","strides"],"mappings":";;qGAuDA,SAASA,EAAWC,EAAQC,EAAQC,GACnC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,GAFAhB,GADAW,EAAKjB,EAAQ,IACJ,GACTO,EAAKU,EAAI,KACJX,GAAM,GAAKC,GAAM,GAmBtB,IAfAa,GADAD,EAAII,EAAgBxB,EAAQ,GAAKC,EAAQ,GAAKiB,IACxCO,KAENtB,GADAgB,EAAKC,EAAEM,SACG,GACVtB,EAAMe,EAAI,GAGVG,GADAF,EAAII,EAAgBxB,EAAQ,GAAKC,EAAQ,GAAKiB,IACxCO,KAENpB,GADAc,EAAKC,EAAEM,SACG,GACVpB,EAAMa,EAAI,GAEVI,EAAIvB,EAAQ,GAEZY,EAAK,EACLE,EAAK,EACCJ,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAM7B,IALAC,EAAK,EACLE,EAAK,EACLE,EAAKM,EAAGT,GACRI,EAAKM,EAAGR,GACRG,EAAKM,EAAGb,GACFD,EAAK,EAAGA,EAAKF,EAAIE,IACtBQ,EAAIR,GAAOP,EAAKa,EAAIJ,GAAMK,EAAIH,IAC9BF,GAAMR,EACNU,GAAMR,EAEPO,GAAMR,EACNU,GAAMR,CACN,CACF"}